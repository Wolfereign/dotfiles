" ------------------------------------------------------------------------------------
" Plugin Installation (Plugin Settings At End of File)
" ------------------------------------------------------------------------------------
" Install Plugged and Init
if empty(glob('~/.vim/autoload/plug.vim'))
  silent! curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

	" PaperColor Theme https://vimawesome.com/plugin/papercolor-theme
	Plug 'nlknguyen/papercolor-theme'

	" Draculo Theme https://vimawesome.com/plugin/vim
	Plug 'dracula/vim'

	" Colorfull Status Bar 
	Plug 'itchyny/lightline.vim'

	" The Nerd Tree https://vimawesome.com/plugin/nerdtree-red
	Plug 'scrooloose/nerdtree'

	" Fugitive (Git Commands) https://vimawesome.com/plugin/fugitive-vim
	Plug 'tpope/vim-fugitive'

	" Git Gutter (show diff) https://vimawesome.com/plugin/vim-gitgutter
	Plug 'airblade/vim-gitgutter'

	" Surround (quoting/parenthesizing made simple) https://vimawesome.com/plugin/surround-vim
	Plug 'tpope/vim-surround'

	" delimitmate (auto close stuff) https://vimawesome.com/plugin/delimitmate
	Plug 'raimondi/delimitmate'

	" Syntax checking hacks for vim https://vimawesome.com/plugin/syntastic
	Plug 'scrooloose/syntastic'

	" Syntax for Rust w/Syntastic https://vimawesome.com/plugin/rust-vim-superman
	Plug 'rust-lang/rust.vim'

	" Syntax for Powershell https://vimawesome.com/plugin/vim-ps1
	Plug 'pprovost/vim-ps1'

call plug#end()

" Install Missing Plugings
autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif

" ------------------------------------------------------------------------------------
" Default Vim Settings 
" ------------------------------------------------------------------------------------
set background=dark
silent! colorscheme PaperColor

" Enable syntax highlighting
syntax on

" Make Vim more useful
set nocompatible

" Disable audio bell / beebing tone
set belloff=all

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed

" Enhance command-line completion
set wildmenu

" Allow cursor keys in insert mode
set esckeys

" Remap Escape Key Functionality
inoremap jk <Esc>

" Allow backspace in insert mode
set backspace=indent,eol,start

" Optimize for fast terminal connections
set ttyfast

" Add the g flag to search/replace by default
"set gdefault

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" Change mapleader
let mapleader=","

" Don’t add empty newlines at the end of files
set binary
set noeol

" Centralize backups, swapfiles and undo history
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
if exists("&undodir")
	set undodir=~/.vim/undo
endif

" Don’t create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*

" Respect modeline in files
set modeline
set modelines=4

" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure

" Enable line numbers
set number

" Highlight current line
"set cursorline

" Make tabs as wide as two spaces
set tabstop=2

" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list

" Highlight searches
set hlsearch

" Ignore case of searches
set ignorecase

" Highlight dynamically as pattern is typed
set incsearch

" Always show status line
set laststatus=2

" Enable mouse in all modes
set mouse=a

" Disable error bells
set noerrorbells

" Don’t reset cursor to start of line when moving around.
set nostartofline

" Show the cursor position
set ruler

" Don’t show the intro message when starting Vim
set shortmess=atI

" Show the current mode
set showmode

" Show the filename in the window titlebar
set title

" Show the (partial) command as it’s being typed
set showcmd

" Use relative line numbers
"if exists("&relativenumber")
"	set relativenumber
"	au BufReadPost * set relativenumber
"endif

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Strip trailing whitespace (,ss)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>

" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

" Automatic commands
if has("autocmd")
	" Enable file type detection
	filetype on
	
	" Treat .json files as .js
	autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
	
	" Treat .md files as Markdown
	autocmd BufNewFile,BufRead *.md setlocal filetype=markdown
endif


" ------------------------------------------------------------------------------------
" Plugin Settings
" ------------------------------------------------------------------------------------

" Syntastic Settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Syntax Powershell Settings
let g:ps1_nofold_blocks = 1
